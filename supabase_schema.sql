SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;


CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";
COMMENT ON SCHEMA "public" IS 'standard public schema';
CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";
CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";
CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";
CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";
CREATE EXTENSION IF NOT EXISTS "postgis" WITH SCHEMA "extensions";
CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";
CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";




CREATE TYPE "public"."day" AS ENUM (
    'Monday',
    'Tuesday',
    'Wednesday',
    'Thursday',
    'Friday',
    'Saturday',
    'Sunday'
);


ALTER TYPE "public"."day" OWNER TO "postgres";


CREATE TYPE "public"."reservation_status" AS ENUM (
    'pending',
    'rejected',
    'approved',
    'done'
);


ALTER TYPE "public"."reservation_status" OWNER TO "postgres";


CREATE TYPE "public"."sector" AS ENUM (
    'Grooming',
    'Accommodation',
    'Rental',
    'Food'
);


ALTER TYPE "public"."sector" OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";


CREATE TABLE IF NOT EXISTS "public"."branch" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "name" "text" NOT NULL,
    "phone" "text" NOT NULL,
    "active" boolean DEFAULT false,
    "city" "text" NOT NULL,
    "thumbnail" "text" NOT NULL,
    "reservation_period" bigint NOT NULL,
    "owner_id" "uuid" NOT NULL,
    "sector" "public"."sector" DEFAULT 'Grooming'::"public"."sector" NOT NULL,
    "country" "text" DEFAULT 'TÃ¼rkiye'::"text" NOT NULL,
    "location" "extensions"."geography",
    "details" "text" DEFAULT ''::"text" NOT NULL,
    CONSTRAINT "branch_details_check" CHECK (("length"("details") <= 256))
);


ALTER TABLE "public"."branch" OWNER TO "postgres";


CREATE OR REPLACE VIEW "public"."branch_plus_dist" WITH ("security_invoker"='true') AS
 SELECT "branch"."id",
    "branch"."created_at",
    "branch"."name",
    "branch"."phone",
    "branch"."active",
    "branch"."city",
    "branch"."thumbnail",
    "branch"."reservation_period",
    "branch"."owner_id",
    "branch"."sector",
    "branch"."country",
    "branch"."location",
    "branch"."details",
    NULL::double precision AS "dist_meters"
   FROM "public"."branch"
  WHERE false;


ALTER TABLE "public"."branch_plus_dist" OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."nearby_branches"("long" double precision, "lat" double precision) RETURNS SETOF "public"."branch_plus_dist"
    LANGUAGE "sql"
    AS $$
  select *, st_distance(location, st_point(long, lat)::geography) as dist_meters
  from public.branch
  order by location <-> st_point(long, lat)::geography
  
$$;


ALTER FUNCTION "public"."nearby_branches"("long" double precision, "lat" double precision) OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."asset" (
    "id" bigint NOT NULL,
    "branch_id" bigint NOT NULL,
    "name" "text" NOT NULL,
    "active" boolean DEFAULT false NOT NULL,
    "price" "text"
);


ALTER TABLE "public"."asset" OWNER TO "postgres";


ALTER TABLE "public"."branch" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."branch_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."branch_image" (
    "id" bigint NOT NULL,
    "branch_id" bigint NOT NULL,
    "uri" "text" NOT NULL
);


ALTER TABLE "public"."branch_image" OWNER TO "postgres";


ALTER TABLE "public"."branch_image" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."branch_image_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE OR REPLACE VIEW "public"."branch_with_location" WITH ("security_invoker"='true') AS
 SELECT "branch"."id",
    "branch"."created_at",
    "branch"."name",
    "branch"."phone",
    "branch"."active",
    "branch"."city",
    "branch"."thumbnail",
    "branch"."reservation_period",
    "branch"."owner_id",
    "branch"."sector",
    "branch"."country",
    "branch"."location",
    "branch"."details",
    "extensions"."st_y"(("branch"."location")::"extensions"."geometry") AS "lat",
    "extensions"."st_x"(("branch"."location")::"extensions"."geometry") AS "long"
   FROM "public"."branch";


ALTER TABLE "public"."branch_with_location" OWNER TO "postgres";


ALTER TABLE "public"."asset" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."entity_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."profile" (
    "id" "uuid" DEFAULT "auth"."uid"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "email" character varying NOT NULL,
    "phone" "text",
    "full_name" "text",
    "avatar" "text"
);


ALTER TABLE "public"."profile" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."reservation" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "branch_id" bigint NOT NULL,
    "customer_id" "uuid" NOT NULL,
    "status" "public"."reservation_status" DEFAULT 'pending'::"public"."reservation_status",
    "rating" bigint,
    "comment" "text",
    "asset_id" bigint NOT NULL,
    CONSTRAINT "reservation_comment_check" CHECK (("length"("comment") < 256)),
    CONSTRAINT "reservation_rating_check" CHECK ((("rating" >= 0) AND ("rating" <= 5)))
);


ALTER TABLE "public"."reservation" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."reservation_date" (
    "id" bigint NOT NULL,
    "reservation_id" bigint NOT NULL,
    "date" "date" NOT NULL,
    "time" time without time zone,
    "asset_id" bigint NOT NULL
);


ALTER TABLE "public"."reservation_date" OWNER TO "postgres";


ALTER TABLE "public"."reservation_date" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."reservation_date_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



ALTER TABLE "public"."reservation" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."reservation_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."reservation_service" (
    "id" bigint NOT NULL,
    "reservation_id" bigint,
    "service_id" bigint NOT NULL
);


ALTER TABLE "public"."reservation_service" OWNER TO "postgres";


ALTER TABLE "public"."reservation_service" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."reservation_service_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."service" (
    "id" bigint NOT NULL,
    "branch_id" bigint NOT NULL,
    "name" "text" NOT NULL,
    "time_span" bigint,
    "price" "text",
    "active" boolean DEFAULT false NOT NULL
);


ALTER TABLE "public"."service" OWNER TO "postgres";


ALTER TABLE "public"."service" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."service_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."working_hour" (
    "id" bigint NOT NULL,
    "branch_id" bigint NOT NULL,
    "day" "public"."day" NOT NULL,
    "opening" "text",
    "closing" "text"
);


ALTER TABLE "public"."working_hour" OWNER TO "postgres";


ALTER TABLE "public"."working_hour" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."working_hour_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



ALTER TABLE ONLY "public"."branch_image"
    ADD CONSTRAINT "branch_image_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."branch"
    ADD CONSTRAINT "branch_phone_key" UNIQUE ("phone");



ALTER TABLE ONLY "public"."branch"
    ADD CONSTRAINT "branch_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."asset"
    ADD CONSTRAINT "entity_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."profile"
    ADD CONSTRAINT "profile_email_key" UNIQUE ("email");



ALTER TABLE ONLY "public"."profile"
    ADD CONSTRAINT "profile_phone_key" UNIQUE ("phone");



ALTER TABLE ONLY "public"."profile"
    ADD CONSTRAINT "profile_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."reservation_date"
    ADD CONSTRAINT "reservation_date_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."reservation"
    ADD CONSTRAINT "reservation_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."reservation_service"
    ADD CONSTRAINT "reservation_service_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."service"
    ADD CONSTRAINT "service_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."asset"
    ADD CONSTRAINT "uq_asset_branch_name" UNIQUE ("branch_id", "name");



ALTER TABLE ONLY "public"."working_hour"
    ADD CONSTRAINT "uq_branch_day" UNIQUE ("branch_id", "day");



ALTER TABLE ONLY "public"."reservation_date"
    ADD CONSTRAINT "uq_reservation_date_time" UNIQUE ("asset_id", "date", "time");



ALTER TABLE ONLY "public"."service"
    ADD CONSTRAINT "uq_service_branch_name" UNIQUE ("branch_id", "name");



ALTER TABLE ONLY "public"."working_hour"
    ADD CONSTRAINT "working_hour_pkey" PRIMARY KEY ("id");



CREATE INDEX "branches_geo_index" ON "public"."branch" USING "gist" ("location");



ALTER TABLE ONLY "public"."branch_image"
    ADD CONSTRAINT "branch_image_branch_id_fkey" FOREIGN KEY ("branch_id") REFERENCES "public"."branch"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."branch"
    ADD CONSTRAINT "branch_owner_id_fkey" FOREIGN KEY ("owner_id") REFERENCES "public"."profile"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."asset"
    ADD CONSTRAINT "entity_branch_id_fkey" FOREIGN KEY ("branch_id") REFERENCES "public"."branch"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."profile"
    ADD CONSTRAINT "profile_id_fkey" FOREIGN KEY ("id") REFERENCES "auth"."users"("id");



ALTER TABLE ONLY "public"."reservation"
    ADD CONSTRAINT "reservation_asset_id_fkey" FOREIGN KEY ("asset_id") REFERENCES "public"."asset"("id");



ALTER TABLE ONLY "public"."reservation"
    ADD CONSTRAINT "reservation_branch_id_fkey" FOREIGN KEY ("branch_id") REFERENCES "public"."branch"("id");



ALTER TABLE ONLY "public"."reservation"
    ADD CONSTRAINT "reservation_customer_id_fkey" FOREIGN KEY ("customer_id") REFERENCES "public"."profile"("id");



ALTER TABLE ONLY "public"."reservation_date"
    ADD CONSTRAINT "reservation_date_asset_id_fkey" FOREIGN KEY ("asset_id") REFERENCES "public"."asset"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."reservation_date"
    ADD CONSTRAINT "reservation_date_reservation_id_fkey" FOREIGN KEY ("reservation_id") REFERENCES "public"."reservation"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."reservation_service"
    ADD CONSTRAINT "reservation_service_reservation_id_fkey" FOREIGN KEY ("reservation_id") REFERENCES "public"."reservation"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."reservation_service"
    ADD CONSTRAINT "reservation_service_service_id_fkey" FOREIGN KEY ("service_id") REFERENCES "public"."service"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."service"
    ADD CONSTRAINT "service_branch_id_fkey" FOREIGN KEY ("branch_id") REFERENCES "public"."branch"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."working_hour"
    ADD CONSTRAINT "working_hour_branch_id_fkey" FOREIGN KEY ("branch_id") REFERENCES "public"."branch"("id") ON DELETE CASCADE;



CREATE POLICY "Branch DELETE" ON "public"."branch" FOR DELETE TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = "owner_id"));



CREATE POLICY "Branch INSERT" ON "public"."branch" FOR INSERT TO "authenticated" WITH CHECK ((( SELECT "auth"."uid"() AS "uid") = "owner_id"));



CREATE POLICY "Branch SELECT" ON "public"."branch" FOR SELECT TO "authenticated" USING (true);



CREATE POLICY "Branch UPDATE" ON "public"."branch" FOR UPDATE TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = "owner_id"));



CREATE POLICY "BranchImage DELETE" ON "public"."branch_image" FOR DELETE TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = ( SELECT "branch"."owner_id"
   FROM "public"."branch"
  WHERE ("branch"."id" = "branch_image"."branch_id"))));



CREATE POLICY "BranchImage INSERT" ON "public"."branch_image" FOR INSERT TO "authenticated" WITH CHECK ((( SELECT "auth"."uid"() AS "uid") = ( SELECT "branch"."owner_id"
   FROM "public"."branch"
  WHERE ("branch"."id" = "branch_image"."branch_id"))));



CREATE POLICY "BranchImage SELECT" ON "public"."branch_image" FOR SELECT TO "authenticated" USING (true);



CREATE POLICY "Entity DELETE" ON "public"."asset" FOR DELETE TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = ( SELECT "branch"."owner_id"
   FROM "public"."branch"
  WHERE ("branch"."id" = "asset"."branch_id"))));



CREATE POLICY "Entity INSERT" ON "public"."asset" FOR INSERT TO "authenticated" WITH CHECK ((( SELECT "auth"."uid"() AS "uid") = ( SELECT "branch"."owner_id"
   FROM "public"."branch"
  WHERE ("branch"."id" = "asset"."branch_id"))));



CREATE POLICY "Entity SELECT" ON "public"."asset" FOR SELECT TO "authenticated" USING (true);



CREATE POLICY "Entity UPDATE" ON "public"."asset" FOR UPDATE TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = ( SELECT "branch"."owner_id"
   FROM "public"."branch"
  WHERE ("branch"."id" = "asset"."branch_id"))));



CREATE POLICY "Profile DELETE" ON "public"."profile" FOR SELECT TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = "id"));



CREATE POLICY "Profile INSERT" ON "public"."profile" FOR INSERT TO "authenticated" WITH CHECK (true);



CREATE POLICY "Profile SELECT" ON "public"."profile" FOR SELECT TO "authenticated" USING (true);



CREATE POLICY "Profile UPDATE" ON "public"."profile" FOR UPDATE TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = "id"));



CREATE POLICY "Reservation DELETE" ON "public"."reservation" FOR DELETE TO "authenticated" USING (((( SELECT "auth"."uid"() AS "uid") = "customer_id") OR (( SELECT "auth"."uid"() AS "uid") = ( SELECT "branch"."owner_id"
   FROM "public"."branch"
  WHERE ("branch"."id" = "reservation"."branch_id")))));



CREATE POLICY "Reservation INSERT" ON "public"."reservation" FOR INSERT TO "authenticated" WITH CHECK (((( SELECT "auth"."uid"() AS "uid") = "customer_id") AND (EXISTS ( SELECT "profile"."phone"
   FROM "public"."profile"
  WHERE ("profile"."id" = "reservation"."customer_id")))));



CREATE POLICY "Reservation SELECT" ON "public"."reservation" FOR SELECT TO "authenticated" USING (true);



CREATE POLICY "Reservation UPDATE" ON "public"."reservation" FOR UPDATE TO "authenticated" USING (((( SELECT "auth"."uid"() AS "uid") = "customer_id") OR (( SELECT "auth"."uid"() AS "uid") = ( SELECT "branch"."owner_id"
   FROM "public"."branch"
  WHERE ("branch"."id" = "reservation"."branch_id")))));



CREATE POLICY "ReservationDate INSERT" ON "public"."reservation_date" FOR INSERT TO "authenticated" WITH CHECK ((EXISTS ( SELECT "reservation"."customer_id"
   FROM "public"."reservation"
  WHERE ((( SELECT "auth"."uid"() AS "uid") = "reservation"."customer_id") AND ("reservation"."id" = "reservation_date"."reservation_id")))));



CREATE POLICY "ReservationDate SELECT" ON "public"."reservation_date" FOR SELECT TO "authenticated" USING (true);



CREATE POLICY "ReservationService DELETE" ON "public"."reservation_service" FOR DELETE TO "authenticated" USING ((EXISTS ( SELECT "reservation"."customer_id"
   FROM "public"."reservation"
  WHERE ((( SELECT "auth"."uid"() AS "uid") = "reservation"."customer_id") AND ("reservation"."id" = "reservation_service"."reservation_id")))));



CREATE POLICY "ReservationService INSERT" ON "public"."reservation_service" FOR INSERT TO "authenticated" WITH CHECK ((EXISTS ( SELECT "reservation"."customer_id"
   FROM "public"."reservation"
  WHERE ((( SELECT "auth"."uid"() AS "uid") = "reservation"."customer_id") AND ("reservation"."id" = "reservation_service"."reservation_id")))));



CREATE POLICY "ReservationService SELECT" ON "public"."reservation_service" FOR SELECT TO "authenticated" USING ((EXISTS ( SELECT "reservation"."customer_id"
   FROM "public"."reservation"
  WHERE ((( SELECT "auth"."uid"() AS "uid") = "reservation"."customer_id") AND ("reservation"."id" = "reservation_service"."reservation_id")))));



CREATE POLICY "Service DELETE" ON "public"."service" FOR DELETE TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = ( SELECT "branch"."owner_id"
   FROM "public"."branch"
  WHERE ("branch"."id" = "service"."branch_id"))));



CREATE POLICY "Service INSERT" ON "public"."service" FOR INSERT TO "authenticated" WITH CHECK ((( SELECT "auth"."uid"() AS "uid") = ( SELECT "branch"."owner_id"
   FROM "public"."branch"
  WHERE ("branch"."id" = "service"."branch_id"))));



CREATE POLICY "Service SELECT" ON "public"."service" FOR SELECT TO "authenticated" USING (true);



CREATE POLICY "Service UPDATE" ON "public"."service" FOR UPDATE TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = ( SELECT "branch"."owner_id"
   FROM "public"."branch"
  WHERE ("branch"."id" = "service"."branch_id"))));



CREATE POLICY "WorkingHour DELETE" ON "public"."working_hour" FOR DELETE TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = ( SELECT "branch"."owner_id"
   FROM "public"."branch"
  WHERE ("branch"."id" = "working_hour"."branch_id"))));



CREATE POLICY "WorkingHour INSERT" ON "public"."working_hour" FOR INSERT TO "authenticated" WITH CHECK ((( SELECT "auth"."uid"() AS "uid") = ( SELECT "branch"."owner_id"
   FROM "public"."branch"
  WHERE ("branch"."id" = "working_hour"."branch_id"))));



CREATE POLICY "WorkingHour SELECT" ON "public"."working_hour" FOR SELECT TO "authenticated" USING (true);



CREATE POLICY "WorkingHour UPDATE" ON "public"."working_hour" FOR UPDATE TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = ( SELECT "branch"."owner_id"
   FROM "public"."branch"
  WHERE ("branch"."id" = "working_hour"."branch_id"))));



ALTER TABLE "public"."asset" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."branch" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."branch_image" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."profile" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."reservation" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."reservation_date" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."reservation_service" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."service" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."working_hour" ENABLE ROW LEVEL SECURITY;

ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";




GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";



GRANT ALL ON TABLE "public"."branch" TO "anon";
GRANT ALL ON TABLE "public"."branch" TO "authenticated";
GRANT ALL ON TABLE "public"."branch" TO "service_role";



GRANT ALL ON TABLE "public"."branch_plus_dist" TO "anon";
GRANT ALL ON TABLE "public"."branch_plus_dist" TO "authenticated";
GRANT ALL ON TABLE "public"."branch_plus_dist" TO "service_role";



GRANT ALL ON FUNCTION "public"."nearby_branches"("long" double precision, "lat" double precision) TO "anon";
GRANT ALL ON FUNCTION "public"."nearby_branches"("long" double precision, "lat" double precision) TO "authenticated";
GRANT ALL ON FUNCTION "public"."nearby_branches"("long" double precision, "lat" double precision) TO "service_role";



GRANT ALL ON TABLE "public"."asset" TO "anon";
GRANT ALL ON TABLE "public"."asset" TO "authenticated";
GRANT ALL ON TABLE "public"."asset" TO "service_role";



GRANT ALL ON SEQUENCE "public"."branch_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."branch_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."branch_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."branch_image" TO "anon";
GRANT ALL ON TABLE "public"."branch_image" TO "authenticated";
GRANT ALL ON TABLE "public"."branch_image" TO "service_role";



GRANT ALL ON SEQUENCE "public"."branch_image_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."branch_image_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."branch_image_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."branch_with_location" TO "anon";
GRANT ALL ON TABLE "public"."branch_with_location" TO "authenticated";
GRANT ALL ON TABLE "public"."branch_with_location" TO "service_role";



GRANT ALL ON SEQUENCE "public"."entity_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."entity_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."entity_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."profile" TO "anon";
GRANT ALL ON TABLE "public"."profile" TO "authenticated";
GRANT ALL ON TABLE "public"."profile" TO "service_role";



GRANT ALL ON TABLE "public"."reservation" TO "anon";
GRANT ALL ON TABLE "public"."reservation" TO "authenticated";
GRANT ALL ON TABLE "public"."reservation" TO "service_role";



GRANT ALL ON TABLE "public"."reservation_date" TO "anon";
GRANT ALL ON TABLE "public"."reservation_date" TO "authenticated";
GRANT ALL ON TABLE "public"."reservation_date" TO "service_role";



GRANT ALL ON SEQUENCE "public"."reservation_date_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."reservation_date_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."reservation_date_id_seq" TO "service_role";



GRANT ALL ON SEQUENCE "public"."reservation_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."reservation_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."reservation_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."reservation_service" TO "anon";
GRANT ALL ON TABLE "public"."reservation_service" TO "authenticated";
GRANT ALL ON TABLE "public"."reservation_service" TO "service_role";



GRANT ALL ON SEQUENCE "public"."reservation_service_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."reservation_service_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."reservation_service_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."service" TO "anon";
GRANT ALL ON TABLE "public"."service" TO "authenticated";
GRANT ALL ON TABLE "public"."service" TO "service_role";



GRANT ALL ON SEQUENCE "public"."service_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."service_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."service_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."working_hour" TO "anon";
GRANT ALL ON TABLE "public"."working_hour" TO "authenticated";
GRANT ALL ON TABLE "public"."working_hour" TO "service_role";



GRANT ALL ON SEQUENCE "public"."working_hour_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."working_hour_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."working_hour_id_seq" TO "service_role";




ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";



ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";



ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";

RESET ALL;
